import Foundation

enum Play: Equatable {

    case rock, paper, scissors

    init(elfValue: String) {
        switch elfValue {
        case "A": self = .rock
        case "B": self = .paper
        case "C": self = .scissors
        default: fatalError()
        }
    }

    init(myValue: String) {
        switch myValue {
        case "X": self = .rock
        case "Y": self = .paper
        case "Z": self = .scissors
        default: fatalError()
        }
    }

    func getWinningMove() -> Play {
        switch self {
        case .rock: return .paper
        case .paper: return .scissors
        case .scissors: return .rock
        }
    }

    func getLoosingMove() -> Play {
        switch self {
        case .rock: return .scissors
        case .paper: return .rock
        case .scissors: return .paper
        }
    }

    var pointsIfIChoose: Int {
        switch self {
        case .rock: return 1
        case .paper: return 2
        case .scissors: return 3
        }
    }
}

enum Result {

    case win, lose, draw

    var points: Int {
        switch self {
        case .win: return 6
        case .draw: return 3
        case .lose: return 0
        }
    }

    init(fromInput: String) {
        switch fromInput {
        case "X": self = .lose
        case "Y": self = .draw
        case "Z": self = .win
        default: fatalError()
        }
    }
}

struct Round {

    let opponent: Play
    let me: Play

    func evaluate() -> Result {
        if opponent == me { return .draw }

        switch opponent {
        case .rock:
            if me == .scissors { return .lose }
            if me == .paper { return .win }
            fatalError()
        case .paper:
            if me == .rock { return .lose }
            if me == .scissors { return .win }
            fatalError()
        case .scissors:
            if me == .paper { return .lose }
            if me == .rock { return .win }
            fatalError()
        }
    }
}

struct Game {

    enum InputFormat {
        case part1, part2
    }

    let rounds: [Round]

    static func parse(input: String, inputFormat: InputFormat) -> Game {
        var rounds: [Round] = []
        let rows = input.components(separatedBy: "\n")
        for row in rows {
            let roundAsString = row.components(separatedBy: " ")
            let round: Round
            let opponentMove = Play(elfValue: roundAsString[0])
            let myMove: Play
            switch inputFormat {
            case .part1:
                myMove = Play(myValue: roundAsString[1])
            case .part2:
                let expectedResult = Result(fromInput: roundAsString[1])
                switch expectedResult {
                case .win: myMove = opponentMove.getWinningMove()
                case .lose: myMove = opponentMove.getLoosingMove()
                case .draw: myMove = opponentMove
                }
            }
            round = Round(opponent: opponentMove, me: myMove)
            rounds.append(round)
        }
        return Game(rounds: rounds)
    }

    var totalPointsForMe: Int {
        rounds.reduce(0) { partialResult, round in
            partialResult + round.evaluate().points + round.me.pointsIfIChoose
        }
    }
}

var input = """
B Y
A Z
A Z
C Z
B Y
B Y
B X
B Z
C Z
B X
B Y
A Z
B Y
B Z
B Y
C Z
B Z
B Y
B Z
C Y
B Y
A Z
B Y
B Y
B Y
C Y
A Z
B Y
B X
A Z
B X
A Z
A Z
B Y
B Y
B X
A Z
B Y
B Z
C X
C X
B Y
B Y
B X
B X
C X
B X
A Z
B Y
B Y
C X
A Z
B Y
B Z
B X
B X
A Z
A X
B Y
B Y
B Z
C Z
B Z
B Z
B Z
A Z
A Z
B X
B X
B Y
B X
B X
C Z
C Z
A Z
A Y
A Z
B Z
A Z
B Y
C X
B X
C X
B Z
B Z
C Z
B Z
B X
C X
A Z
C X
B Z
A Y
C Z
B Y
C Y
B X
A X
B Y
B X
B X
B Z
B Y
A Z
B Z
B Y
B Y
A X
A Z
B X
B X
B X
B X
B Z
B Z
B Y
C X
A Z
A Z
B Y
B Z
B Y
A Z
B Z
A Z
A Z
C X
B Z
A Z
A Z
B Y
B Z
A Z
B Y
B Y
A Z
B Y
C X
B Z
B Y
B X
C X
B X
B X
B X
A Z
A Z
C Y
A Z
B Y
A Z
C X
B Z
B Z
C X
B Y
C X
B X
B X
C X
A Z
B Y
C X
B X
B Y
A Z
B Y
B Y
C X
B Y
C X
A Z
A Z
A Z
B Y
B Y
A X
A Z
A Z
B Y
C X
C Y
B Y
C X
A Z
B X
A Z
A Z
C X
B Y
A Z
B Y
C X
A Z
B X
B Y
A Z
B Y
B X
B X
C X
B Y
C Y
A Z
B Y
B Y
C Y
B Y
C Y
C X
A Y
A Y
B Z
B Y
A Z
B Z
B X
B X
B Y
A Z
B Y
B X
B Y
B Y
C Z
B Y
B Y
A Z
A Z
B Z
A Y
C X
B Y
B Y
B Z
B Z
B Y
C X
B Y
B X
B Z
B Y
B X
B Y
C Z
B Y
B X
A Z
B Z
B Z
A Z
C X
B Y
C Z
A Z
B Y
C Z
B Y
B X
B Y
B X
C Z
B Z
A Z
A Z
A Z
A X
B Z
B Y
B X
B Y
A Z
B Z
C Z
B X
B Z
B Z
A Z
B Y
B X
A Z
A Z
B Y
B X
A Z
A Z
C Z
A Z
C Z
B Y
B Y
B Z
C X
A Z
B X
B Y
B X
B Y
B Y
B X
B Z
B X
C Z
C X
C X
A Z
A Z
B X
B X
A Y
C X
B Y
A Y
B Z
B X
A Z
B X
B Y
B Y
B Y
B Y
A Z
A Z
B Y
B X
C Z
B Z
C X
B Z
B Y
C X
A Z
B Y
A Z
A Z
B Z
B Y
B X
A Z
B X
B Y
A Z
B Z
B X
B X
A Z
C Y
B X
A Z
B X
B Y
C X
B Y
C Z
C X
B Y
B Y
B Y
B X
B Y
B X
A Y
A Z
B Z
B Y
B X
B Z
B Y
C Z
B Y
A Z
B X
A Z
C X
A X
B Z
B Z
C X
A Z
B X
A Z
A Z
B Z
A Z
B Y
B Z
C Z
A Y
A Z
A Z
A Z
C X
B Z
B Z
B Y
B X
B Y
B Y
B Y
B Z
B Y
B Y
A Z
B Z
A Z
C X
B Y
B X
B Y
B X
B Y
B Y
C X
B Y
B Y
B Z
B Y
C X
B Y
B X
B Y
C X
A X
A Z
C Z
B Y
C Z
B X
C Z
C X
C Z
B Y
B Y
C X
C X
B Y
C X
A Y
B Y
B X
B X
B Z
B Y
C Y
C X
B X
B Y
B Z
B X
B Z
B Z
C X
B X
B Y
B Z
B X
C Z
A Y
B Y
B Y
B Y
A Y
C Y
B Y
B Z
B Z
B Y
B Y
B Z
B X
B X
B Y
A Z
C Y
C Z
B Y
B X
B Y
B Y
C X
B Y
C X
A Z
B X
C X
C Z
A Z
A Z
B Y
C X
A Z
A Z
B Y
A Y
B Y
A Z
A Z
B X
C X
A Z
B X
B Z
A Z
A Z
B X
B Y
B X
B Z
B Y
B Y
B Z
C X
C X
B Y
A Z
B X
B X
B Y
B Z
B Y
B X
B Z
B X
B Y
C X
B Y
B Y
C Y
A Z
B Y
B X
B Y
A Z
C X
A Z
A X
B Z
B X
A Z
B Y
B X
B X
A Z
B Y
A Z
B Z
B Y
A Z
B Y
B Y
A Z
B Z
C Z
B Y
B Y
C Y
A Z
B Y
B Y
B Y
B Y
B Z
B Y
B Y
B Y
C X
B Z
B X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B X
A Z
A Z
C Z
B X
B X
B Y
B Z
B Z
B Z
B Y
B Y
B Y
B Y
B Z
B Y
A Z
A Y
A Z
B Y
B Y
A Z
B X
B Y
A Z
C Z
B Z
B Z
B Y
A Z
A Z
B Y
B X
B Z
B X
B Y
B Y
B X
C X
B Z
B X
A Z
B Y
C Z
B X
A Z
C Z
C Z
A Z
B Y
B Y
A Y
B Y
C Z
B X
C X
B Y
B X
B Z
B Y
B Z
B Y
B Y
A Z
B X
B X
A Y
B Z
B X
B Z
A Y
B Z
C X
B X
B X
B Z
B X
C Y
B Y
C X
C X
B Z
B X
C Z
B Z
A Z
C Y
B Y
B Y
B X
B Z
B Y
B Y
B X
C X
B Y
B Y
C Y
B Z
C X
A Z
B X
B X
B Z
B X
B Y
A Z
B Z
B X
A Z
B Y
C X
A Y
A Z
C X
B X
B Z
B X
C X
A Z
B X
B Y
B Y
A Z
B Z
C X
A Z
B Z
C X
B X
A Z
C X
C Z
B Y
B Z
B Y
B X
C Z
B Z
B Z
B Y
A Z
C Z
A Y
B Y
C X
B Y
B Z
A Z
B Z
A Z
B X
C X
B Y
A Z
B Y
B X
C Z
B Z
C X
B Y
B X
C Y
B Y
C X
B Y
B Y
B Y
B Z
B Y
B X
B Y
B Y
A Z
A Z
C X
B Z
B Y
A Z
B X
C X
B Y
B X
A Z
C Z
A Z
B Z
B Y
B X
B Z
B Y
A Z
C X
C Z
A Y
A Z
C X
C Y
C Z
B Y
B X
B Z
B Y
B X
B Y
A Z
B Y
C X
B X
B Y
C Z
B Y
B Y
B Y
B X
B Y
C Z
B X
B Y
B Y
B Z
B X
B X
B Z
B Z
A Z
A Z
C X
B Y
B Y
C X
B Y
B X
A Y
C Z
B Y
B Z
B Y
B Y
A Z
B Y
B Z
B Y
B Z
B X
B Z
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
A Z
B X
B Y
B Z
B X
B Y
B X
B X
B Y
B X
C Y
B Z
B Y
B Z
C Y
A Z
B Y
A Z
B X
A Z
A Z
C Z
B X
C Y
A Z
B Z
B Z
B X
B Z
B Y
A Z
B Z
C Z
A Z
C Y
A Z
B Y
A Z
B Y
A Z
B X
A Z
B Z
C X
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
C X
B Y
B Z
B X
B Y
B X
A Z
B Y
B Y
A Z
B Y
B Z
B Z
B X
B Z
B Y
B X
B Y
B Y
C X
C Z
B Y
B Y
B Y
B Z
B Y
B Y
B Y
A Z
B Y
B X
B Y
B X
B Z
B Y
B X
B X
A Y
B Y
B X
B Y
B Y
B Y
B Z
B X
A Z
B Y
B Y
B Y
A Z
B X
B X
C Z
B Y
B Y
A Z
B Y
B Z
B X
C X
B Y
B Y
C X
C Z
B X
A Z
B Y
B Y
B X
B X
B X
B Y
B Y
A Z
A Z
B Y
B Y
A Z
B Z
A Z
C X
C X
B Y
B Y
A Z
A Z
C Z
B Z
B X
A Z
B X
B Y
B Y
B X
B Y
B Y
C Z
B Y
B X
C Z
C Z
B X
B Y
B Y
B Z
A Z
B Y
B Y
B Y
B X
B X
A Z
A Z
B X
B Y
B Z
B Y
B Z
B Y
B Z
C X
B Y
C X
B Y
B Y
C Y
A Z
B X
C Z
B Y
B Z
B Y
B Y
B Y
C X
B X
B Y
A Z
C Y
B Y
A Z
B Y
B Z
B Z
B Y
B Y
B Y
C X
B Y
A Y
C Y
B X
B X
B X
B X
B Z
B X
B Z
B Y
B Y
A Z
B X
B X
A Z
A Y
B Y
B Z
B Y
C X
B Y
B X
B Z
C X
B Z
B Y
B X
B X
A Z
B Y
B Y
B Y
C X
A X
B X
C X
B X
C X
B X
A X
B Y
B Y
B Y
B Y
B Z
C Y
C X
A Z
B Z
B Z
B Y
B Z
B Y
B Y
B X
B Z
A Z
A Z
B Z
B X
B Z
A Z
B Y
B Y
B Y
B Z
A Y
B X
B Z
B Y
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
B Z
A Y
C X
B X
B X
C X
A Z
A Z
A Z
B Y
B Z
A X
A X
B Y
C X
A Z
B Z
A Z
B Y
B Y
B X
B X
B Y
C X
B Z
B Y
B X
B X
B Y
B Z
B Y
B Y
B X
B X
B X
B Y
C X
B Y
B Y
B X
B Y
B Y
B X
B X
A Z
C X
B X
A Z
B Y
B Y
B Z
B Y
B X
A Z
C Y
B X
B Z
B Y
C X
A Z
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B Z
A Z
C Z
B Y
B Y
B X
B Z
B Y
B X
B X
B Y
B Z
B X
B Y
C Z
A X
B Y
C X
A X
B X
B X
B Z
A X
B X
B Y
B X
A Z
B Z
C Z
B X
B X
A Z
B X
B X
B Z
B Y
B Y
A Z
B Y
B Y
B X
B X
B X
B Y
A Y
C X
B X
A Z
B X
B Y
C Z
B Y
B Y
A Z
B Y
A Z
B Y
A Z
B Y
B Y
A Z
B X
B X
B Y
B Y
B Y
A Z
B Y
B Y
A Z
B X
A X
A Z
B Y
B X
B Z
B Z
B Y
B Y
C Y
B Y
B Y
B X
B Y
A Z
C X
B Z
B X
B Z
A Z
B Y
B Z
B X
A Z
A Z
C X
B X
A Y
C X
B Z
B Z
C Z
B Z
B Z
C Y
A Z
C Z
A Z
C Z
B Z
B Y
C X
B Y
B X
A Z
C Y
B X
B Y
B Y
B X
B Y
A Z
A Z
B Y
B Z
B Y
C X
B X
B Y
B X
A Z
C X
B Y
B Y
B Y
B Y
C Z
B Y
C Z
A X
C Z
B X
B Y
B Y
B X
B Y
C X
C X
A Z
B Y
B Y
C X
B Z
C Y
B Z
B Z
B Z
B X
B X
B X
B Z
B X
C X
B Y
C X
B X
C Z
B Y
B X
B Z
B Y
B Y
B Y
B Y
B Y
B X
B X
A Z
B Y
B X
B Y
B Y
A Y
B Y
B Y
A Z
A Z
C Z
B X
B Y
B Y
B Z
C Z
C X
A Z
C X
A X
B X
B Z
B Y
A Z
C Z
B Y
C Z
B X
A Z
B X
A Z
B Y
A Y
B Y
B Y
A Z
C X
B X
B Y
A Z
B Z
B Y
B X
B X
C Y
B X
A Z
B Z
A Z
C X
C Y
B Z
B Z
A Z
B X
B Y
B X
C X
B Y
B Y
B X
C X
B X
B Y
B X
B Y
B Z
B Y
B X
B X
A Z
B Y
B Y
C X
C Y
C X
A Z
A Z
B X
B X
B Z
A Z
A Z
C Z
B Z
A X
B X
B Y
B Y
A Z
B Y
B X
B X
B X
B Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
B Z
A Z
B Y
B X
C X
A Y
B Y
B Y
B Z
C Z
B X
C X
B Z
B Y
B Y
B X
B X
B X
A Z
B X
A Y
B Y
B Y
C X
A Z
B Y
C X
B Y
B X
B X
B X
C Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
B X
A Y
B Y
B Y
B Y
B X
B X
B Z
B X
B Z
B X
B Y
A Y
A Z
C Y
B Z
C X
B Z
B Y
B X
A Y
B Y
B X
B Y
B X
C Z
B X
C Z
B Y
B X
B Z
A Y
A Y
C Z
B X
B X
B Y
A Z
B Y
B Z
A Z
B X
B X
B X
B X
B X
B Z
A Z
A Z
C Y
C X
A Z
A Z
C X
B X
B X
B Z
B X
A Z
B Y
B X
B Y
C X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B Y
B X
B Y
C Y
B X
B Z
B Y
A Z
B Z
A Y
B Y
A Z
B X
B Y
A Z
B Y
C Z
B Z
B Y
C X
C X
B X
B Z
B Y
B Z
B Z
B Z
B Z
A Z
B Y
B X
B Z
B Y
B X
A Z
A Z
A Z
B Y
C Y
C Z
B Z
B X
B Y
B Z
B Y
A Z
A Z
C Z
B X
B Y
B Z
B X
A Y
A Y
B Y
A Y
B Z
B Y
A Z
B Y
B Y
B Y
C Z
B X
B Z
B X
B Y
B Y
B Y
C X
B X
B Y
B Z
B X
B Y
B Y
B Y
B X
B X
B X
A Z
B Y
B Y
C X
C X
C X
C X
B Z
A Z
A Z
B Z
B Y
B X
A Z
C Z
B Y
B X
C Z
C X
B X
B Y
B Y
B X
B X
B Y
A Z
B X
B X
B X
B Y
A Y
B X
A Z
B Y
B Y
B Y
C Y
B Z
B X
B Z
C X
B Y
B Z
C X
B X
B X
B Y
B Y
B Y
A Z
A Z
A Z
B Y
B X
C Z
B Z
B Y
B Y
B Y
B Y
B Z
C X
A Z
C Z
B Z
B X
B X
A Z
B X
B Z
A Z
B Y
B Y
A Z
B Y
B Y
C Y
C Z
B X
A Z
B Z
B Y
C Z
C X
B X
A Z
B Y
B Z
B X
A Z
A Z
A Z
B Y
B X
C X
B Z
B Z
B X
B X
B Y
A Z
B X
B X
B Z
A Z
C X
B X
B Y
B Z
A Z
B Y
B Y
B Y
C X
B Z
A Y
A Z
B Z
C X
A Z
A Z
B Y
C X
B Y
B Z
C X
B Y
B Y
A Z
B Z
A Z
C Z
A Z
B X
B Z
A Z
B X
B Y
C Z
A Y
B Y
B Y
B Y
A Z
B Z
A Y
A Z
B Z
B Y
B Y
A Y
B Y
C X
B Z
B Z
A Z
B X
B X
A Z
B Z
C Y
A Z
A Z
B Y
B Z
B X
C Y
B Y
B Y
B Z
B Y
B Z
B X
B X
B Y
B Y
C X
C X
B X
B X
C X
A Z
B Y
C Z
A Z
B X
B Y
B Z
A Z
C Y
A Z
B Z
A Z
C X
C X
B X
B X
B Y
B Y
B Y
B Y
B Z
B X
B Z
C Y
B Y
A Z
B Y
B X
A Y
B Y
B Z
C X
B X
A Z
A Z
B Y
B Y
A Z
C X
B X
B Y
B Y
B Z
A Z
A Z
C Z
A Z
B Y
B Y
B Y
A Z
B Z
B Y
A Z
A Y
B Y
B Y
B Z
A X
A Z
B Z
B X
A Z
B Z
B Y
B Y
B X
A Y
C Y
B Y
B Y
B X
B Z
A Z
B X
B X
B Y
B Y
A Z
B X
C X
B X
B X
A Z
B Y
C X
A Z
B X
C Z
A Z
B Y
B Y
B X
B X
A Z
C Z
B X
B X
B Y
A Z
B Y
B Y
B X
B Y
B X
A Z
B Y
B Z
B X
A Z
B Y
C Z
C X
A Z
A Y
B X
B Z
B Y
B Y
B Y
B Z
B Z
A Y
C X
B X
C X
B Y
B Y
B Z
B Y
C Y
C X
B Z
C X
B Y
B X
B Y
B Y
A Z
B Y
A Z
A Z
A Z
A Z
B Y
A Z
B X
B X
B X
C Z
B Z
C Y
B Y
A Z
B Z
B Y
B Y
B Y
A Z
B Z
C Y
C X
B Y
B Y
B Y
B X
B Y
B Z
A Z
B Y
B Y
C Y
B Z
B X
B Y
B X
B Z
B Y
C Y
C Y
A Z
B X
B X
A Y
B Z
A Z
B Y
B X
B X
B Z
B X
A Z
B Y
C X
C X
B Z
A Z
B Y
B Y
B Y
B Y
B Y
B X
B Y
B Y
B Z
B Z
A X
A Z
A Z
A Z
A Y
C X
B Y
B Z
B X
A Z
B Y
B Y
B X
B Y
B Y
C Y
C Y
B X
A Z
B Y
C X
B Y
A Y
B X
B X
B Y
C X
A Z
B Y
B X
C X
C Z
B Y
B Y
B Y
A Z
B X
A Z
C Z
B Z
B Y
B Y
B X
B Y
B Y
B X
A Z
C X
C Z
B X
B Y
C Y
B X
A Z
B Y
A Z
B Y
A Y
A Z
A Z
B Y
B Y
B Z
C Z
C X
B Y
B Z
B Y
A Z
B Y
B Z
B Y
B X
B Y
B Z
B Y
B Z
C X
B Y
B Y
C Z
A Z
B Y
C X
B X
A Y
B Y
A Z
B Y
B X
B Y
B Y
B X
B X
B X
B Y
B Y
C Z
B Z
C X
C Z
B Y
C X
B X
A Z
B Y
C Z
A Y
B Y
B Y
B Y
C X
B X
B Y
B Y
B Z
C X
B X
B Z
A Z
B X
B Z
B X
A Z
B Y
B Z
C X
B X
C X
B X
B Y
B Z
B Z
B Z
A Z
B Y
B X
B Y
B Y
B X
B Z
B Y
C X
A Z
B Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
C X
B X
A Y
B Y
B Y
B Y
A Z
A Z
A Z
C Y
B Z
A Y
B Y
B X
B X
B Y
C X
B Y
C Z
B Y
A X
B Y
B X
B Y
B X
C Z
B Y
B Z
B X
B Z
A Z
B Y
B X
B Y
A Z
B X
C Y
B X
B Y
B Y
B Y
C X
B Y
B Y
B Y
A Z
B Z
C X
A Z
B Y
C Y
B X
A Z
C Z
B X
B Y
B X
C Z
B X
B Z
C Y
B X
B Y
B X
B Z
B X
B Z
B Y
B Z
B X
A Z
B X
A X
B X
B Y
B Y
B Y
A Z
B Y
B Y
B Z
C X
B Y
B Y
B Y
B X
B X
B X
C Z
B Z
B X
A Z
B Y
B Z
B Y
B Y
B Y
B Y
C X
A Z
B Z
B Y
B Y
B Z
A Z
B Y
B Z
B Y
B Y
C Y
A Z
B Z
C X
B X
C Z
B X
B X
B Y
B Y
A X
B Y
C Z
A Z
B X
C Z
C Z
B X
A Z
B X
C Z
B Z
B Y
B Y
C X
A Z
B X
B Y
B X
B X
B X
B Y
C X
B Z
B Y
B Y
B Y
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B X
A Z
B Z
B Y
B X
B Y
A Y
B Y
B Y
B Y
B Z
B X
B Y
C Z
C X
B Y
C Y
B Z
A Z
A Z
B Y
B Y
A Z
B Z
B Y
B X
A Z
A Z
C X
A Z
C X
A Z
B Y
C X
B X
B X
B Y
A Y
B Y
B Z
B X
B Y
B Y
A Z
B X
B Y
A Z
A Y
A Z
C X
A Z
C X
A X
B Y
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
B Y
B X
B Y
C X
C X
B Y
B Y
B X
C Z
C Z
C Z
C X
B Y
C Z
A Z
C Z
B Y
A Z
B Z
B X
A Y
B Y
B Y
B X
B Y
B Y
C X
B Y
A Z
B Y
A Z
C Z
A Z
B Y
B Z
A Z
B X
B X
B Z
B X
B Y
A Z
B Y
C X
A Z
C Z
B X
A Z
B Y
B Y
C Z
B Z
A Z
B Y
B X
B Y
B Z
C Z
A Y
A Z
B X
B X
A Z
C Y
B Y
A X
A Z
B X
B Y
B X
A Z
C X
B Y
B Y
C X
A X
B Y
A Z
A Z
B Y
B Z
B Y
B Y
B Y
B X
B Y
B X
B X
B X
B Y
A Z
C X
A Z
A Z
A X
A Z
B X
B Z
B Y
A Z
"""

let part1 = Game.parse(input: input, inputFormat: .part1).totalPointsForMe

let part2 = Game.parse(input: input, inputFormat: .part2).totalPointsForMe

